package com.app.UserService.Controllers;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.app.UserService.Entities.User;
import com.app.UserService.UserService.Uservice;
import com.app.UserService.impl.UserServiceImpl;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;

@RestController
@RequestMapping("/user")
public class UserController {

	@Autowired
	Uservice uservice;

	private Logger logger = LoggerFactory.getLogger(UserServiceImpl.class);

	@PostMapping
	public ResponseEntity<User> createUser(@RequestBody User user) {
		User user1 = uservice.saveUser(user);
		return ResponseEntity.status(HttpStatus.CREATED).body(user1);
	}

	@GetMapping("/{userId}")
	@CircuitBreaker(name = "ratingHotelBreaker", fallbackMethod = "ratingHotelFallback")
	public ResponseEntity<User> getSingleUser(@PathVariable String userId) {
		User user=uservice.getUserById(userId);
		return ResponseEntity.ok(user);
	}

	public ResponseEntity<User> ratingHotelFallback(String userId,Exception ex){
		logger.info("Fallback is executed because service is down :"ex.getMessage());
		User user= User.builder().email("ABC@gmail.com").name("ABC").about("This user is created because some service is down").userId("12345").build();
		return new ResponseEntity<>(user,HttpStatus.ok);
		
	}

	@GetMapping
	public ResponseEntity<List<User>> getAllUser() {
		List<User> alluser = uservice.getAllUser();
		return ResponseEntity.ok(alluser);
	}

}
